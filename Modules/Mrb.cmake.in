# Once only!
include_guard(GLOBAL)

cmake_policy(PUSH)
cmake_minimum_required(VERSION 3.19...3.21 FATAL_ERROR)

if (EXISTS ${CMAKE_SOURCE_DIR}/cetmodules)
  list(PREPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cetmodules/Modules
    ${CMAKE_SOURCE_DIR}/cetmodules/Modules/compat)
  set(_mrb_bootstrap_dir "${CMAKE_BINARY_DIR}/cetmodules/Modules")
else()
  find_package(cetmodules @MRB_MIN_CETMODULES_VERSION@ REQUIRED)
  set(_mrb_bootstrap_dir "${cetmodules_BIN_DIR}/../Modules")
  cmake_path(ABSOLUTE_PATH _mrb_bootstrap_dir NORMALIZE)
endif()

include(CetCMakeEnv)
include(Compatibility)

function(mrb_check_subdir_order)
  # Read the order determined by mrbsetenv
  set(prod_setup_file "${CMAKE_BINARY_DIR}/$ENV{MRB_PROJECT}-$ENV{MRB_PROJECT_VERSION}")
  file(READ "${prod_setup_file}" prod_setup)
  string(REPLACE "\n" ";" prod_setup "${prod_setup}")
  list(FILTER prod_setup INCLUDE REGEX "^# >> .* <<$")
  list(TRANSFORM prod_setup REPLACE "^# >> (.*) <<$" "\\1")

  # Now read the current subdirectory order.
  set(subdirs_file "${CMAKE_SOURCE_DIR}/.cmake_add_subdir")
  file(READ "${subdirs_file}" subdirs)
  string(REPLACE "\n" ";" subdirs "${subdirs}")
  list(FILTER subdirs INCLUDE REGEX "^(mrb_)?add_subdirectory")
  list(TRANSFORM subdirs REPLACE "^(mrb_)?add_subdirectory\\(([^)]+)\\).*$" "\\2")

  # Compare and complain.
  if (NOT "${subdirs}" STREQUAL "${prod_setup}")
    message(FATAL_ERROR "\
Current CMake subdirectory inclusion order is not consistent with current packages \
and their interdependencies.
Please run \"mrb uc\" to regenerate \${MRB_SOURCE}/CMakeLists.txt with \
subdirectories listed for inclusion in the correct order.\
")
  endif()
endfunction()

function(mrb_checkpoint)
  cet_checkpoint_cmp()
  cet_checkpoint_did()
endfunction()

function(mrb_process_checkpoints)
  cet_process_cmp()
  cet_process_did()
endfunction()

macro(mrb_add_subdirectory _mrb_source_subdir)
  if (NOT "${_mrb_source_subdir}" STREQUAL "cetmodules")
    mrb_set_bootstrap(${_mrb_source_subdir})
  endif()
  add_subdirectory(${ARGV})
endmacro()

function(mrb_set_bootstrap _mrb_source_subdir)
  get_filename_component(_mrb_source_subdir "${CMAKE_CURRENT_LIST_DIR}/${_mrb_source_subdir}/CMakeLists.txt" REALPATH)
  string(SHA256 _mrb_source_subdir_prefix "${_mrb_source_subdir}")
  foreach (_mrb_prefix_candidate IN LISTS CET_PV_PREFIX)
    if (_mrb_source_subdir_prefix MATCHES "^${_mrb_prefix_candidate}")
      set(_mrb_source_subdir_prefix "${_mrb_prefix_candidate}")
      break()
    endif()
  endforeach()
  if (CET_PV_${_mrb_source_subdir_prefix}_UPS_BUILD_ONLY_DEPENDENCIES MATCHES "(^|;)cet(modules|buildtools)(;|$)")
    set(CMAKE_PROJECT_INCLUDE_BEFORE "${_mrb_bootstrap_dir}/BootstrapCet${CMAKE_MATCH_2}.cmake" PARENT_SCOPE)
  else()
    unset(CMAKE_PROJECT_INCLUDE_BEFORE PARENT_SCOPE)
  endif()
endfunction()

mrb_check_subdir_order()

mrb_checkpoint()

cmake_policy(POP)
