#!/usr/bin/env perl
#
# setup products for the build environment
# use product_deps and MRB_QUALS

use File::Basename;
use lib dirname($0);
use POSIX qw(uname);

use mrb_parse_deps;


if( $#ARGV < 1 ) {
    $errfl1 = "problem_report";
    open(ERR1, "> $errfl1") or die "Couldn't open $errfl1";
    print ERR1 "\n";
    print ERR1 "unsetenv_ CETPKG_NAME\n";
    print ERR1 "unsetenv_ CETPKG_VERSION\n";
    print ERR1 "unsetenv_ CETPKG_DIR\n";
    print ERR1 "unsetenv_ CETPKG_QUAL\n";
    print ERR1 "unsetenv_ CETPKG_TYPE\n";
    print ERR1 "unsetenv_ CETPKG_CC\n";
    print ERR1 "unsetenv_ CETPKG_CXX\n";
    print ERR1 "unsetenv_ CETPKG_FC\n";
    print ERR1 "echo \"ERROR: directory not specified\"\n";
    print ERR1 "echo \"USAGE: define_local <input-directory> <build-directory> [extra qualifiers]>\"\n";
    print ERR1 "return 1\n";
    close(ERR1);
    print "$errfl1\n";
    exit 0;
}

my $sourcedir = $ARGV[0];
my $builddir = $ARGV[1];
my $simple = "";
for $i ( 2 .. $#ARGV ) {
    if( $ARGV[$i] eq "simple" ) {
      $simple = "true";
    } else {
      $extra_qual = $extra_qual.$ARGV[$i].":";
    }
}

# use this file for debugging
$diagfl = $builddir."/diag_report";
open(DIAG, ">> $diagfl") or die "Couldn't open $diagfl";

$inputdir = $sourcedir."/ups";

my $mrb_project = $ENV{MRB_PROJECT};
my $mrb_project_version = $ENV{MRB_PROJECT_VERSION};
my $mrb_quals = $ENV{MRB_QUALS};
my $tmpfl = $builddir."/".$mrb_project."-".$mrb_project_version."-defs";
##print DIAG "opening $tmpfl for $mrb_project $mrb_project_version\n";
open(TSET, "+> $tmpfl") or die "Couldn't open $tmpfl";

##print DIAG "setup_products debug info: cmakefile  is $cmakefile\n";
my @uname = uname();
##print DIAG "uname returns $uname[0] $uname[1] $uname[2]\n";
my $library_path_name = LD_LIBRARY_PATH;
if ( $uname[0] eq "Darwin" ) {
  $library_path_name = DYLD_LIBRARY_PATH;
}
my $have_library_path=$ENV{${library_path_name}};
##print DIAG "${library_path_name}: ${have_library_path}\n";


# have to find the list of packages to traverse
my $cmakefile=$sourcedir."/CMakeLists.txt";
my @package_list = get_package_list( $cmakefile, DIAG );
##print DIAG "DIAGNOSTICS: packages to check: @package_list\n";
if ( $#package_list < 0 ) {
  print DIAG "DIAGNOSTICS: there are no packages in $sourcedir\n";
  print DIAG "DIAGNOSTICS: nothing to build\n";
  print "$tmpfl\n";
  exit 0;
}
for $i ( 0 .. $#package_list ) {
  my $pkg=$package_list[$i];
  my $pfile=$sourcedir."/".$pkg."/ups/product_deps";
  ##print DIAG "checking $pfile for $pkg \n";
  ($productnames[$i], $productversn[$i]) = get_product_name( $pfile, DIAG );
  $productdefaultquals[$i] = find_default_qual( $pfile );
  ##print DIAG "DIAGNOSTICS: $productdefaultquals[$i] for $productnames[$i]\n";
}

# unsetup if necessary
print TSET "# unsetup products we are building\n";
##print DIAG "DIAGNOSTICS: packages to check: @package_list\n";
for $i ( 0 .. $#package_list ) {
  # call unsetup if the $productnames[$i] has been setup
  my $psetup = "SETUP_".uc($productnames[$i]);
  my $is_setup=$ENV{$psetup};
  ##print DIAG "DIAGNOSTICS: $psetup for $productnames[$i] is $is_setup\n";
  if ( $is_setup ) {
    print TSET "unsetup -j $productnames[$i]\n";
  }
}

# loop again and define package variables
print TSET "# set package variables\n";
my $build_dir = $ENV{MRB_BUILDDIR};
my $source_dir = $ENV{MRB_SOURCE};
my $have_perllib = $ENV{PERL5LIB};
my $have_fclpath = $ENV{FHICL_FILE_PATH};
my $have_path = $ENV{PATH};
my $have_fw_path = $ENV{FW_SEARCH_PATH};
my $have_root_path = $ENV{ROOT_INCLUDE_PATH};
for $i ( 0 .. $#package_list ) {
  my $pkg=$package_list[$i];
  my $pfile=$sourcedir."/".$pkg."/ups/product_deps";
  ##print DIAG "checking $pfile for $pkg \n";
  my $product = $productnames[$i];
  my $version = $productversn[$i];
  my $qual    = $productdefaultquals[$i]; 

  my $fcl_directory = get_fcl_directory( $pfile, $product );
  my $gdml_directory = get_gdml_directory( $pfile, $product );
  my $perl_directory = get_perl_directory( $pfile, $product );
  my $fw_directory = get_fw_directory( $pfile, $product );
  ##print DIAG "$pkg perl directory: $perl_directory \n";
  my $root_path = get_root_path( $pfile, $product );
  ##print DIAG "$pkg root path: $root_path\n";
  # pretend this is a product
  my $product_uc = uc($product);
  print TSET "setenv  ${product_uc}_VERSION $version\n";
  print TSET "setenv  ${product_uc}_DIR ${source_dir}/${product}\n";
  # dropit -esf will remove any existing instances of the path and then prepend the path
  # unfortunately, tcsh complains if the variable is not already set, so we have to check
  if ( ${have_path} ne '' ) {
    print TSET "setenv  PATH \`dropit -esf -p \${PATH} \'${build_dir}/${product}/bin\'\`\n";
  } else {
    $have_path = true;
    print TSET "setenv  PATH \'${build_dir}/${product}/bin\'\n";
  }
  if ( ${have_library_path} ne '' ) {
    print TSET "setenv  ${library_path_name} \`dropit -esf -p \${${library_path_name}} \'${build_dir}/${product}/lib\'\`\n";
  } else {
    $have_library_path = true;
    print TSET "setenv  ${library_path_name} \'${build_dir}/${product}/lib\'\n";
  }
##  if ( $ENV{DYLD_LIBRARY_PATH} ne '' ) {
##    print TSET "setenv  DYLD_LIBRARY_PATH \`dropit -esf -p \${DYLD_LIBRARY_PATH} \'${build_dir}/${product}/lib\'\`\n";
##  } else {
##    print TSET "setenv  DYLD_LIBRARY_PATH \'${build_dir}/${product}/lib\'\n";
##  }
  if ( "${fcl_directory}" ne "none" ) {
    ##print DIAG "$product: add ---${fcl_directory}---\n";
    if ( ${have_fclpath} ne '' ) {
      print TSET "setenv  FHICL_FILE_PATH \`dropit -esf -p \${FHICL_FILE_PATH} \'${build_dir}/${fcl_directory}\'\`\n";
    } else {
      $have_fclpath = true;
      print TSET "setenv  FHICL_FILE_PATH \'${build_dir}/${fcl_directory}\'\n";
    }
  }
  if ( "${gdml_directory}" ne "none" ) {
    if ( ${have_fw_path} ne '' ) {
      print TSET "setenv  FW_SEARCH_PATH \`dropit -esf -p \${FW_SEARCH_PATH} \'${build_dir}/${gdml_directory}\'\`\n";
    } else {
      $have_fw_path = true;
      print TSET "setenv  FW_SEARCH_PATH \'${build_dir}/${gdml_directory}\'\n";
    }
  }
  if ( "${perl_directory}" ne "none" ) {
    ##print DIAG "pkg have perllib: ${have_perllib}\n";
    if ( "${have_perllib}" ne '' ) {
      ##print DIAG "PERL5LIB is already set\n";
      print TSET "setenv  PERL5LIB \`dropit -esf -p \${PERL5LIB} \'${build_dir}/${perl_directory}\'\`\n";
    } else {
      $have_perllib = true;
      ##print DIAG "PERL5LIB is not yet set\n";
      print TSET "setenv  PERL5LIB \'${build_dir}/${perl_directory}\'\n";
    }
  }
  if ( "${fw_directory}" ne "none" ) {
    if ( ${have_fw_path} ne '' ) {
      print TSET "setenv  FW_SEARCH_PATH \`dropit -esf -p \${FW_SEARCH_PATH} \'${build_dir}/${fw_directory}\'\`\n";
    } else {
      $have_fw_path = true;
      print TSET "setenv  FW_SEARCH_PATH \'${build_dir}/${fw_directory}\'\n";
    }
  }
  if ( "${root_path}" ne "none" ) {
    if ( ${have_root_path} ne '' ) {
      print TSET "setenv  ROOT_INCLUDE_PATH \`dropit -esf -p \${ROOT_INCLUDE_PATH} ${root_path}\`\n";
    } else {
      $have_root_path = true;
      print TSET "setenv  ROOT_INCLUDE_PATH ${root_path}\n";
    }
  }

}
# make sure we still have the local directory
print TSET "setenv  FHICL_FILE_PATH .:\${FHICL_FILE_PATH}\n";

# cleanup
close(TSET);
close(DIAG);
print "$tmpfl\n";


exit 0;
