#!/usr/bin/env bash

# mrb is a convenient "umbrella" script used to dispatch other scripts to do development 
# releated tasks.

( return >/dev/null 2>&1 ) && (( is_sourced = 1 ))

mrb_bin=$(cd "${BASH_SOURCE%/*}" && pwd -P)
nl=$'\n'"       "
prog=mrb
export mrb_command="${mrb_bin}/${prog}"
export mrb_libexec=$(cd "${mrb_bin}/../libexec" && pwd -P)
export mrb_templates=$(cd "${mrb_bin}/../templates" && pwd -P)

shopt -s execfail

error_exit() {
  local exitval=1
  [[ "$1" =~ ^[0-9]+$ ]] && { (( exitval = $1 )); shift; }
  (( $# )) && printf "ERROR: ${@//$'\n'/$'\n'       }"$'\n' 1>&2
  (( is_sourced )) && return $exitval || exit $exitval
}

prep_buildtool() {
  [ -n "$MRB_BUILDDIR" ] && [ -d "$MRB_BUILDDIR" ] || \
    error_exit "MRB_BUILDDIR is undefined or invalid${MRB_BUILDDIR:+: ($MRB_BUILDDIR)}" || return
  [ -e "$MRB_BUILDDIR/cetpkg_info.sh" ] || \
    error_exit 2 "you must \"mrbsetenv\" in $MRB_BUILDDIR" || return
  cmd=buildtool
  cmd_args=("$@")
}

usage() {
  local available_commands="${cmds[*]}"
  available_commands="${available_commands// / | }"
  cat 1>&2 <<EOF
USAGE: $prog ${available_commands}
       $prog -h
EOF
  [ -n "$1" ] || error_exit 1 || return
  cat 1>&2 <<EOF

  Tools (for help on a tool, do "${mrb_command} <tool> -h")

   build (b)                   Run buildtool
   changeQual (cq)             Change a single qualifer in product_deps (e.g. s52 to s55)
   changelog (c)               Display a changelog for a package
   checkDeps (cd)              Check for missing build packages
   gitCheckout (g)             Clone a git repository
   install (i)                 Run buildtool with install
   makeDeps (md)               Build or update a header level dependency list
   makePackage (mp)            Make distribution tarballs
   newDev (n)                  Start a new development area
   newProduct (p)              Create a new product from scratch
   pullDeps (pd)               Pull missing build packages into MRB_SOURCE
   svnCheckout (svn)           Checkout from a svn repository
   test (t)                    Run buildtool with tests
   updateDepsCM (uc)           Update the main CMakeLists.txt file
   updateDepsPV (uv)           Update a product version in product_deps
   updateSource                Update all svn or git code in MRB_SOURCE
   zapBuild (z)                Delete everything in your build area
   zapDist (zd)                Delete everything in both your build and localProducts areas
   zapInstall (zi)             Delete everything in your localProducts area

  Aliases (for commands that must be sourced to alter the invoker's environment)

   mrbsetenv                   Set up a development environment 
                               (source \$MRB_DIR/bin/mrbSetEnv)
   mrbslp                      Set up all products installed in the working localProducts_XXX directory
                               (source \$MRB_DIR/bin/setup_local_products)

EOF
  error_exit || return
}
  
# Define the short list of commands.
cmds=(build
  changeQual
  changelog
  checkDeps
  gitCheckout
  install
  makeDeps
  makePackage
  mrbsetenv
  mrbslp
  newDev
  newProduct
  pullDeps
  svnCheckout
  test
  updateDepsCM
  updateDepsPV
  zapBuild
  zapDist
  zapInstall
)

# Get the desired sub-command.
(( $# )) && { subcmd="$1"; shift; } || usage || return

##################
# Some sanity checks.

# Make sure we have ups
[ -n "$UPS_DIR" ] || error_exit "please set up ups" || return

# Make sure MRB_PROJECT is defined.
[ -n "$MRB_PROJECT" ] || error_exit 2 "MRB_PROJECT is not defined
Please set \${MRB_PROJECT} to the main product (e.g., larsoft, uboone, etc.)
in the environment" || return

# Forward remaining args by default.
cmd_args=("$@")

# For locking operations.
resources=(build);

# Determine how to dispatch
case $subcmd in
  # h3. Help
  -h|--help|help|h|"") usage ${subcmd} || return;;

  # h3. Subcommands
  # Set up a new development area (calls &l=bin/newDev.sh&)
  newDev|n) cmd="$mrb_libexec/newDev.sh"; resources+=(top cml);;
  gitCheckout|g) cmd="$mrb_libexec/gitCheckout";;
  svnCheckout|svn) cmd="$mrb_libexec/svnCheckout";;
  newProduct|p) cmd="$mrb_libexec/newProduct.sh"; resources+=(cml);;
  setEnv|s) error_exit 5 \
    "please invoke the mrbsetenv alias to ensure correct environment setup" || \
    return;;
  setup_local_products|slp) error_exit 5 \
    "please invoke the mrbslp alias to ensure correct environment setup" || \
    return;;
  build|install|test|b|i|t) resources=() # Handled by buildtool
    prep_buildtool ${MRB_INSTALL:+-I "${MRB_INSTALL}"} -${subcmd:0:1} \
      "${cmd_args[@]}" || return;;
  makePackage|mp) cmd="$mrb_libexec/makePackage.sh"; resources+=(package);;
  zapBuild|z) cmd="$mrb_libexec/zapBuild.sh";;
  zapInstall|zi) cmd="$mrb_libexec/zapInstall.sh"; resources+=(install);;
  zapDist|zd) cmd="$mrb_libexec/zapDist.sh"; resources+=(install);;
  changelog|changeLog|c) cmd=git; resources=()
    cmd_args=(
      log
      --graph
      --pretty=tformat:'%Cgreen%ad%Creset%C(bold blue)% aN(%G?)%Creset%Cred% h%Creset% s%C(yellow)% d%Creset'
      --date=short --abbrev-commit
      "${cmd_args[@]}");;
  updateDepsCM|uc) cmd="$mrb_libexec/updateDepsCM.sh"; resources+=(cml);;
  updateDepsPV|uv) cmd="$mrb_libexec/updateDepsPV.sh";;
  updateSource) cmd="$mrb_libexec/updateSource.sh";;
  changeQual|cq) cmd="$mrb_libexec/changeQual.sh";;
  makeDeps|md) cmd="$mrb_libexec/makeDep.py";;
  checkDeps|cd) cmd="$mrb_libexec/pullDep.py"; cmd_args=(-n "$@");;
  pullDeps|pd) cmd="$mrb_libexec/pullDep.py";;
  debug) echo "mrb_bin=$mrb_bin
mrb_command=$mrb_command
MRB_BUILDDIR=$MRB_BUILDDIR
MRB_INSTALL=$MRB_INSTALL
MRB_PROJECT=$MRB_PROJECT
MRB_PROJECT_VERSION=$MRB_PROJECT_VERSION
MRB_QUALS=$MRB_QUALS
MRB_SOURCE=$MRB_SOURCE
MRB_TOP=$MRB_TOP
"; error_exit || return;;
  *) echo "unknown ${prog} command ${subcmd}" 1>&2; usage || return
esac

if (( ${#resources[*]} )); then # Utilize locking.
  lock_cmd=("$mrb_libexec/cet_lock"
            -d "${MRB_BUILDDIR}/.locks"
            -l "$prog $subcmd"
            -s 5
            -t 30
           )
  for resource in ${resources[*]:+"${resources[@]}"}; do
    lock_cmd+=(-r)
    case $resource in
      build) lock_cmd+=("${MRB_PROJECT}_MRB-$MRB_PROJECT_VERSION");;
      cml) lock_cmd+=("$MRB_TOP/.locks:srcs/CMakeLists.txt");;
      top) lock_cmd+=("$MRB_TOP/.locks:$resource");;
      *) lock_cmd+=("$resource")
    esac
  done
fi

# Dispatch.
exec -a "${cmd##*/}" \
     ${lock_cmd[*]:+"${lock_cmd[@]}" --} \
     "${cmd}" ${cmd[*]:+"${cmd_args[@]}"} || \
  error_exit "unable to execute command ${cmd##*/} ${cmd_args[*]}" || return
