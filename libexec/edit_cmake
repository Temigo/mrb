#!/usr/bin/env perl
#

# parse and update a product in CMakeLists.txt


use File::Basename;
use lib dirname($0);

if( $#ARGV < 3 ) {
    print "\n";
    print "ERROR: unspecified parameters - only have $#ARGV \n";
    print "USAGE: edit_cmake <file> <product> <version> <dryrun:yes|no>\n";
    exit 1;
}

$pdfile = $ARGV[0];
$product = $ARGV[1];
$version = $ARGV[2];
($dotversion) = ($version =~ m&^v?(.*)$&); $dotversion =~ s&_&.&g;
$dryrun = $ARGV[3];

if ( $dryrun eq "yes" ) {
  $pdfilebak = $pdfile;
  print "DRY RUN: these changes will be made:\n";
  print "\n";
} else {
  $pdfilebak = $pdfile.".bak";
  print "INFO: renaming $pdfile to $pdfilebak\n";
  print "\n";
  rename ($pdfile, $pdfilebak) || die ( "Failed to rename $pdfile" );
  open(POUT, "> $pdfile")  || die ( "Failed to open new $pdfile" );
}

$get_phash="";
$get_quals="";
$get_fragment="";
my $this_prod;
my ($line, $newline);
open(PIN, "< $pdfilebak") or die "Couldn't open $pdfilebak";
while ($line = <PIN>) {
  if ($line =~ m&^\s*(set|create_(?:product|version)_variables|(?i:project))\b&) {
    $tmpcmd = "\l$1";
    while ($line !~ m&\)& and $line = sprintf("$line%s", <PIN>)) { };
    chomp $line;
    next unless $line =~ m&^(\s*\Q$tmpcmd\E\s*\(\s*)(.*)(\s*\).*)$&s;
    my ($pre, $post) = ($1, $3);
    my ($this_prod, @args) = split(/(\s+)/, $2);
    next unless lc $this_prod eq lc $product;
    if ($tmpcmd eq "project") {
      my $sub_version;
      foreach (@args) {
        next if m&^\s+$&;
        if ($sub_version) {
          $oldver = $_;
          s&^([-\w\.]+)(\${\w+\})?&$dotversion${2}&;
          $newver = $_;
          last;
        } elsif ($_ eq VERSION) {
          $sub_version = 1;
          next;
        }
      }
    } elsif ($tmpcmd eq "set") {
      $args[1] = $version;
    } elsif ($args[1] eq "LIST") {
      # create_version_variables(<prod> LIST ...).
      push @args, $args[-2], $version;
    } else {
      # create_(product|version)_variables(<prod> <version>).
      $args[1] = $version;
    }
    $newline = sprintf("$pre$this_prod%s$post", join("", @args));
    if ($newline ne $line) {
      if ($dryrun eq "yes") {
        print "  old line: $line\n";
        print "  new line: $newline\n";
      } else {
        $line = $newline;
      }
    }
  } else { chomp $line; }
}
continue {
  print_line(POUT, $line, $dryrun);
}
close(PIN);

exit 0;

sub print_line {
  my @params = @_;
  my $output = $params[0];
  my $oline = $params[1];
  my $dr = $params[2];
  if ($dryrun eq "no") {
    print $output "$oline\n";
  }
}

