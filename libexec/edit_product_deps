#!/usr/bin/env perl
#

# parse and update product_deps

use strict;

use warnings FATAL =>
  qw(io regexp severe syntax uninitialized void);;

use Cwd qw(:DEFAULT chdir abs_path);
use File::Basename;
use File::Spec; # For catfile;

use vars qw($_mydir);

BEGIN {
  my $_me = readlink($0);
  if (not $_me) {
    $_me = $0;
  } elsif ($_me !~ m &^/&) {
    $_me = abs_path(File::Spec->catfile(dirname($0), $_me));
  }
  $_mydir = dirname($_me);
}

use lib $_mydir;
use parse_deps ':VERSION';
use warnings FATAL => 'parse_deps';

if( $#ARGV < 3 ) {
    print "\n";
    print "ERROR: unspecified parameters - only have $#ARGV \n";
    print "USAGE: edit_product_deps <file> <product> <version> <dryrun:yes|no>\n";
    exit 1;
}

my $pdfile = $ARGV[0];
my $product = $ARGV[1];

error_exit("ill-formed new version: $ARGV[2]")
  unless $ARGV[2] =~ m&^(?<quote>["']?)(?<ver>.*)\g{quote}$&;
my $new_version = to_ups_version($+{ver});
my $dryrun = ($ARGV[3] // '') =~ m&^(y(?:es)?|1|t(?:rue))&;

use vars qw($pdfilebak);

if ( $dryrun  ) {
  $pdfilebak = $pdfile;
  print "DRY RUN: these changes will be made:\n";
} else {
  $pdfilebak = $pdfile.".bak";
  print "INFO: renaming $pdfile to $pdfilebak\n";
  rename ($pdfile, $pdfilebak) || die ( "Failed to rename $pdfile" );
  open(POUT, "> $pdfile")  || die ( "Failed to open new $pdfile" );
}

my $get_phash="";
my $get_quals="";
my $get_fragment="";
open(PIN, "< $pdfilebak") or die "Couldn't open $pdfilebak";
while (my $line = <PIN>) {
  chomp $line;
  my $newline = $line;
  if ($newline =~ s&^(\s*parent\s+\Q$product\E\s+)[^#\s]+&$1$new_version& or
      ($get_phash eq "true" and
       $newline =~ s&^(\s*\Q$product\E\s+)[^-\s]\S+&$1$new_version&)) {
  } elsif ($line =~ m&^\s*parent\s+\Q$product\E&) {
    printf "INFO: version information for $product is set by project() in %s/CMakeLists.txt\n",
      dirname(dirname($pdfile));
  } elsif ($line =~ m&^\s*product\b&) {
    $get_phash="true";
  } elsif ($line =~ m&^\s*end_product_list\b&) {
    $get_phash="";
  }
  if ($newline ne $line) {
    if ($dryrun) {
      print "  old line: $line\n";
      print "  new line: $newline\n";
    } else {
      $line = $newline;
    }
  }
  print POUT "$line\n" unless $dryrun;
}
close(PIN);

1;
