#!/usr/bin/env bash

# The top level setup_for_development script to set up the development
# environment. Source it and then build with @buildtool@

# This script performs several tasks
#  * Determine the build type based on the qualifier of art
#  * Determine other build qualifiers based on the qualifier of art
#  * Look at the main @CMakeLists.txt@ file to determine the products you want to build
#  * Set up the dependences for the products you want to build
#  * Set run time environment variables like @LD_LIBRARY_PATH@, @PATH@ and @FHICL_FILE_PATH@
#  * Set the build environment variables like @CETPKG_SOURCE@, @CETPKG_BUILD@, @CETPKG_QUAL@, @CETPKG_TYPE@
 
# h2. Functions

function findQual() {

  # Function to determine the non-build type qualifier (e.g. a5 or gcc46). Typically pass
  # it a $SETUP_PRODUCT (e.g. $SETUP_ROOT) string. It will pluck out the -q part
  # and report back the part that is not "debug", "prof", or "opt". 

  have_q=false
  for f in ${1}
  do 
   if [ "${f}" = "-q" ]
   then
     have_q=true
   elif [ "${have_q}" = "true" ]
   then
     have_q=false
     quals=${f}
   fi
  done

  # Split the qualifiers
  parts=$(echo ${quals} | tr ":" " ")

  unset qual
  # Find the non build type 
  for i in $parts; do
    if [[ "$i" != "debug" ]] && [[ "$i" != "prof" ]] && [[ "$i" != "opt" ]]; then
      if [ -z ${qual} ]
      then
        qual=$i
      else
        qual=$i:${qual}
      fi
    else
      buildt=$i
    fi
  done

  # $qual holds the non-build type qualifiers
  # $buildt holds the build type qualifier
}

# h2. Main code

echo '------- SETUP_FOR_DEVELOPMENT --------'
echo

# Where am I running (should be srcs)?
thisDirAB=$(cd ${BASH_SOURCE[0]%/*} && echo $PWD/${BASH_SOURCE[0]##*/} )
thisDirA=`dirname $thisDirAB`

# I need to be sourced!
isSourced=""
[[ ${BASH_SOURCE[0]} != "${0}" ]] && isSourced="yes"
if [ "$isSourced" != "yes" ]; then
  echo "ERROR - You must *source* this script"
  exit 1
fi

# I need to be in a build directory
if echo $PWD | grep -q "build"; then
  nop=1
else
  echo 'ERROR - You must be in a build directory'
  return
fi

# Determine the extraqual (-d, -o, -p, -n)
extraqual="nothing"

# check, but do not use, the art qualifier
findQual "$SETUP_ART"
artQual=$qual
echo "art qualifier is $artQual"
# Use the MRB_PROJECT qualifiers
PROJECTUC=`echo ${MRB_PROJECT} | tr '[:lower:]' '[:upper:]'`
prjsetupname="SETUP_${PROJECTUC}"
prjsetup="${!prjsetupname}"
findQual "${prjsetup}"
prjQual=$qual
prjType=$buildt
echo "${MRB_PROJECT} qualifier is $prjQual"
echo "Will make a $prjType build"
echo ""

test "$prjType" = "debug" && extraqual=":+debug" && export CETPKG_TYPE=Debug && daqual="debug" && flag="-d"
test "$prjType" = "opt" && extraqual=":+opt" && export CETPKG_TYPE=Opt && daqual="opt" && flag="-o"
test "$prjType" = "prof" && extraqual=":+prof" && export CETPKG_TYPE=Prof && daqual="prof" && flag="-p"
test "$1" = "-n" && extraqual="" && export CETPKG_TYPE=None && noflav="noflav" && flag="-n"

if [ "$extraqual" = "nothing" ]; then
  echo "Could not determine the ${MRB_PROJECT} build type; is it set up?"
  return
fi

# Determine the products we want to build by looking for "add_subdirectory" lines in the main
# @CMakeLists.txt@ file
prods=$(grep -i ^add_subdirectory $thisDirA/CMakeLists.txt | sed 's/ //g' | cut -d '(' -f2 | sed 's/)//g')

builddir=`pwd`
oldpath=$PATH
oldfhicl=$FHICL_FILE_PATH
oldtype=$CETPKG_TYPE

# Set up the dependent products

# Loop over the products we want to build
for i in $prods; do

  # Load the product_list for that product
  echo "--- Running $i setup_for_development"
  source ${thisDirA}/${i}/ups/setup_for_development $flag $prjQual

  # Add to LD_LIBRARY_PATH
  #export LD_LIBRARY_PATH=$(pwd)/${i}/lib:${LD_LIBRARY_PATH}
  

  mkdir -p $i
  mv cetpkg_variable_report $i
  mv diag_report $i
  mv ${i}-* $i

  # For the product we want to build, check that PROD_DIR is not set (cuz it's new)
  prodName=$(echo $i | tr 'a-z' 'A-Z' )
  prodDirName=${prodName}_DIR
  if [ ${!prodDirName} ]; then
     echo $prodDirName exists and is ${!prodDirName}
     echo "unsetup -j $i"
     unsetup -j $i
  fi

done

echo ----------------------------------------------------------------

export CETPKG_SOURCE=$thisDirA

# Set CETPKG_BUILD
export CETPKG_BUILD=$(pwd)

# Set FHICL_FILE_PATH to be @fcl@ in the build area
##echo "Define FHICL_FILE_PATH to include ${CETPKG_BUILD}/fcl"
##test -n FHICL_FILE_PATH || export FHICL_FILE_PATH='.'
##export FHICL_FILE_PATH=${CETPKG_BUILD}/fcl:${FHICL_FILE_PATH}

# Set CETPKG_INSTALL (CMAKE_INSTALL_PREFIX should bet setup by the localProducts setup script)
export CETPKG_INSTALL=$CMAKE_INSTALL_PREFIX

# Transfer LD_LIBRARY_PATH to the Mac's DYLD_LIBRARY_PATH (doesn't hurt on Linux)
#export DYLD_LIBRARY_PATH=$LD_LIBRARY_PATH

#  Report on what we did
cat << EOF
Summary:
  CETPKG_SOURCE  = $CETPKG_SOURCE
  CETPKG_BUILD   = $CETPKG_BUILD
  CETPKG_QUAL    = $CETPKG_QUAL
  CETPKG_TYPE    = $CETPKG_TYPE
  CETPKG_VERSION = $CETPKG_VERSION
  CETPKG_INSTALL = $CETPKG_INSTALL
EOF

# cleanup
unset have_q qual quals buildt

echo 'Run buildtool to build'
